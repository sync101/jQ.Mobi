{"name":"Jq.mobi dev","tagline":"The definitive HTML5 mobile javascript framework","body":"# jqMobi - a HTML5 targeted Javascript Framework\r\n\r\njqMobi is a Javascript framework targeted at HTML5 browsers with a blazingly fast query selector library that supports W3C queries.  \r\n\r\nIt is comprised of three parts.\r\n\r\n1) jqMobi  - query selector library\r\n\r\n2) jqUi - UI/UX library for mobile applications in a webkit browser.  Please see the Kitchen Sink folder for a demo\r\n\r\n3) jqPlugins - plugins for mobile applications in a webkit browser.\r\n\r\n\r\n# About jqMobi\r\n\r\n\r\nWe started talking to our development community and asked them what they wanted.  The key features were\r\n\r\n1. Fast performance\r\n\r\n2. Small code base\r\n\r\n3. Only needs to support a small subset of commands\r\n\r\nRather then try to improve another library, we found it easier to build one from the ground up, but recognizing the groundwork other frameworks laid out.  By doing this, we were able to identify simple ways to increase speed performance.  Our tests repeatedly showed we were 2x or more faster at single operation commands. \r\n \r\nAll the libraries performed similar when operations were performed on a group of elements.\r\n\r\n\r\n# Using jqMobi\r\n\r\nTo use jqMobi, include the script in your html file.  You can use the pre-built minified version.\r\n\r\n``` js\r\n<script src=\"jq.mobi.min.js\"></script>\r\n```\r\n\r\nThis will then create two objects that you can work with.  It will NOT override a pre-existing $ object.\r\n``` js\r\n$(\"#main\")\r\njq(\"#main\")\r\n```\r\n\r\n# Query Selector\r\n\r\nW3C spec'ed queries are supported.  What this means is you can do the following\r\n\r\n``` js\r\n$(\"input[type='text']\")\r\n```\r\n\r\nYou can NOT do the following, as it's not supported by the browsers.\r\n\r\n``` js\r\n$(\"input:text\")\r\n```\r\n\r\nIn some functions, an additional selector can be used.  This can be a string, array, or a jqMobi object.  We currently do not support functions\r\n\r\n\r\n\r\n# Syntax:\r\n\r\nBasic call\r\n\r\n``` js\r\n$(\"#id\").hide()\r\n```\r\n\r\nYou can specify a Dom element, selector, list of nodes, or HTML string.\t\r\n\r\n``` js\r\n$(\"span\").bind(\"click\",function(){console.log(\"clicked\");}); // -> find all span elements and attach a click event\r\n```\r\nYou can pass in an HTML string and it will create the object for you.\r\n\r\n``` js\r\nvar myDiv=$(\"<div id='foo'>\") //Creates a div object and returns it\r\n```\r\n\r\n# jqMobi API functions - Please see http://api.jqmobi.com for all functions\r\n\r\n\r\n# jqMobi Ajax calls\r\n\r\n``` js\r\n\r\n.get(url,callback) //Makes an Ajax request to the URL and executes the callback funtion with the result\r\n.post(url,data,callback,dataType) //Makes an Ajax POST request to the URL with the data and executes the callback with the result.  An optional dataType can be passed in, as some webservices require the header\r\n.getJSON(url,data,callback) //Makes an ajax request with the data and executes callback function passing in a JSON object from the Ajax response into the callback function.\r\n```\r\nIf you need more access, you can use the following.\r\n\r\n``` js\r\n.ajax {\r\n   type:'POST', //defaults to GET\r\n   url:'/api/getinfo', //defaults to window.location\r\n   contentType:'application/json', //defaults to application/x-www-form-urlencoded\r\n   headers:{},\r\n   dataType:'application/json', //defaults to text/html\r\n   data:{username:foo}, //Can be a Key/Value pair string or object.  If it's an object, $.serialize is called to turn it into a Key/Value pair string\r\n   success:function(data){}, //function to call on successful Ajax request\r\n   error:function(data){}, //function to call when an error exists in the Ajax request\r\n}\r\n```\r\n\r\nIf the url contains the pattern =? in it, a jsonP request will be made.  These can ONLY be GET requests\r\n\r\n# jqMobi Helper calls\r\n``` js\r\n.param() //Serialize a JSON object into KVP for a querystring\r\n.parseJSON(string) //Backwards compatability JSON parsing call.  Uses the browsers native JSON parser\r\n.parseXML(string) //Parses a string and returns a XML document version\r\n```\r\n\r\n# jqMobi OS detectors\r\n\r\n``` js\r\n$.os.webkit     //True if webkit found in the user agent\r\n$.os.android    //True if anroid useragent\r\n$.os.ipad       //True if iPad useragent\r\n$.os.iphone     //True if iPhone user agent\r\n$.os.webos      //True if WebOS detected\r\n$.os.touchpad   //True if WebOS and Touchpad user agent\r\n$.os.ios        //True if iPad or iPhone\r\n$.os.blackberry //True if Blackberry PlayBook or OS >=6\r\n```\r\n\r\n# Plugins\r\n\r\njqMobi is built with the extendability to add plugins.  To create a plugin, you will most likely extend the $.fn object by passing a reference of the main jqMobi object\r\n\r\n``` js\r\n\r\n(function($){\r\n  $.fn['foo']=function(){\r\n     alert(\"bar\");\r\n  }\r\n})(jq);\r\n\r\n```\r\n\r\n# Contribute\r\n\r\nYou can contribute to the core code by forking it and make a pull request.  Please keep in mind we do not want to add functionality that is a one-off case.  These are best dealt with via plugins.\r\n\r\n\r\n# Bugs\r\n\r\nPlease go to http://www.jqmobi.com and report any bugs with the following\r\n\r\n1. Any error messages from the console\r\n\r\n2. Line numbers of offending code\r\n\r\n3. Test cases\r\n\r\n4. Description of the Error\r\n\r\n5. Expected result\r\n\r\n6. Browser/Device you are testing on\r\n\r\n\r\n# License\r\n\r\njqMobi is is licensed under the terms of the MIT License, see the included license.txt file.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}